# =============================================================================
# docker-compose.yml (com verificação do script Python e fail-fast no dbt)
# =============================================================================
services:

  # ---------------------------------------------------------------------------
  # Serviço: pipeline
  # ---------------------------------------------------------------------------
  pipeline:
    image: python:3.11.9-slim
    container_name: inep-pipeline

    env_file:
      - ./.env

    environment:
      - DBT_PROFILES_DIR=/opt/app/dbt/profiles
      - DEBIAN_FRONTEND=noninteractive
      - PIPELINE_SCRIPT_PATH=${PIPELINE_SCRIPT_PATH}

    volumes:
      - ./:/opt/app

    working_dir: /opt/app

    depends_on:
      postgres:
        condition: service_healthy

    command: >
      bash -lc "
      set -euo pipefail &&
      echo '[pipeline] Atualizando apt e instalando dependências...' &&
      apt-get update &&
      apt-get install -y --no-install-recommends gcc g++ libpq-dev ca-certificates &&
      rm -rf /var/lib/apt/lists/* &&
      echo '[pipeline] Atualizando pip e instalando requirements.txt...' &&
      python -m pip install --upgrade pip &&
      pip install --no-cache-dir -r requirements.txt &&
      echo '[pipeline] Verificando script Python...' &&
      if [ -n \"${PIPELINE_SCRIPT_PATH:-}\" ] && [ -f \"${PIPELINE_SCRIPT_PATH:-}\" ]; then
        echo \"[pipeline] Rodando Python: ${PIPELINE_SCRIPT_PATH}\" &&
        python \"${PIPELINE_SCRIPT_PATH}\";
      else
        echo \"[pipeline] Aviso: arquivo não encontrado (${PIPELINE_SCRIPT_PATH:-<vazio>}). Pulando etapa Python...\" ;
      fi &&
      echo '[pipeline] Executando dbt (deps/seed/run)...' &&
      dbt deps  --project-dir /opt/app/dbt --profiles-dir /opt/app/dbt/profiles &&
      dbt seed  --project-dir /opt/app/dbt --profiles-dir /opt/app/dbt/profiles --full-refresh &&
      dbt run   --project-dir /opt/app/dbt --profiles-dir /opt/app/dbt/profiles --fail-fast
      "

    restart: "no"   # não reinicia se der erro

    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # ---------------------------------------------------------------------------
  # Serviço: dbt-cli (debug manual)
  # ---------------------------------------------------------------------------
  dbt-cli:
    image: ghcr.io/dbt-labs/dbt-postgres:1.7.14
    container_name: dbt-cli

    env_file:
      - ./.env

    environment:
      - DBT_PROFILES_DIR=/opt/dbt/profiles

    volumes:
      - ./dbt:/opt/dbt
      - ./.env:/opt/dbt/.env:ro

    working_dir: /opt/dbt

    command: >
      bash -lc "
      echo '[dbt-cli] Pronto para uso. Ex.: docker exec -it dbt-cli bash' &&
      tail -f /dev/null
      "

    depends_on:
      postgres:
        condition: service_healthy

    restart: unless-stopped

    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

  # ---------------------------------------------------------------------------
  # Serviço: postgres
  # ---------------------------------------------------------------------------
  postgres:
    image: postgres:17
    container_name: inep-postgres

    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

    ports:
      - "${POSTGRES_PORT_HOST:-5433}:5432"   # 5433 host -> 5432 container

    volumes:
      - postgres_data:/var/lib/postgresql/data

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 10

    restart: unless-stopped

    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

# ---------------------------------------------------------------------------
# Redes
# ---------------------------------------------------------------------------
networks:
  default:
    name: inep-net

# ---------------------------------------------------------------------------
# Volumes
# ---------------------------------------------------------------------------
volumes:
  postgres_data:
